import typing as t

from ansible import constants as C

class Api(object):
    def package(
        self, name: str, version: t.Optional[str] = None, state: str = "present", **options
    ):
        """
        Installs a package.
        :param name:
            The name of the package.
        :param version:
            The version of the package. If not given, the latest version is
            installed.
        :param state:
            The state of the package. Possible values:
            * ``present`` (default)
            * ``absent``
            * ``latest``
            * ``upgraded``
        :param ``**options``:
            All remaining keyword arguments are passed to the Ansible
            module. The available options are listed here:
            `<http://docs.ansible.com/ansible/developing_api.html>`_
        """
        ...
    def acl(self): ...
    def add_host(self): ...
    def apt(self): ...
    def apt_key(self): ...
    def apt_repository(self): ...
    def assemble(self): ...
    def assert_(self): ...
    def async_status(self): ...
    def at(self): ...
    def authorized_key(self): ...
    def aws_s3(self): ...
    def blockinfile(self): ...
    def cloudformation(self): ...
    def command(self): ...
    def copy(self): ...
    def debconf(self): ...
    def debug(self): ...
    def dnf(self): ...
    def ec2(self): ...
    def ec2_group(self): ...
    def ec2_metadata_facts(self): ...
    def ec2_snapshot(self): ...
    def ec2_vol(self): ...
    def ec2_vpc_net(self): ...
    def ec2_vpc_net_facts(self): ...
    def ec2_vpc_subnet(self): ...
    def ec2_vpc_subnet_facts(self): ...
    def fail(self): ...
    def fetch(self): ...
    def file(self): ...
    def find(self): ...
    def get_url(self): ...
    def getent(self): ...
    def git(self): ...
    def group(self): ...
    def group_by(self): ...
    def import_playbook(self): ...
    def import_role(self): ...
    def import_tasks(self): ...
    def include(self): ...
    def include_role(self): ...
    def include_tasks(self): ...
    def include_vars(self): ...
    def iptables(self): ...
    def lineinfile(self): ...
    def meta(self): ...
    def mount(self): ...
    def pause(self): ...
    def ping(self): ...
    def pip(self): ...
    def raw(self): ...
    def rhn_channel(self): ...
    def rpm_key(self): ...
    def s3_bucket(self): ...
    def script(self): ...
    def seboolean(self): ...
    def selinux(self): ...
    def service(self): ...
    def set_fact(self): ...
    def setup(self): ...
    def shell(self): ...
    def slurp(self): ...
    def stat(self): ...
    def subversion(self): ...
    def synchronize(self): ...
    def sysctl(self): ...
    def systemd(self): ...
    def template(self): ...
    def unarchive(self): ...
    def uri(self): ...
    def user(self): ...
    def wait_for(self): ...
    def wait_for_connection(self): ...
    def win_acl(self): ...
    def win_acl_inheritance(self): ...
    def win_command(self): ...
    def win_copy(self): ...
    def win_disk_image(self): ...
    def win_dns_client(self): ...
    def win_domain(self): ...
    def win_domain_controller(self): ...
    def win_domain_membership(self): ...
    def win_file(self): ...
    def win_get_url(self): ...
    def win_group(self): ...
    def win_owner(self): ...
    def win_package(self): ...
    def win_path(self): ...
    def win_ping(self): ...
    def win_reboot(self): ...
    def win_regedit(self): ...
    def win_service(self): ...
    def win_share(self): ...
    def win_shell(self): ...
    def win_stat(self): ...
    def win_template(self): ...
    def win_updates(self): ...
    def win_user(self): ...
    def yum(self): ...
    def yum_repository(self): ...
